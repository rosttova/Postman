{
	"info": {
		"_postman_id": "6a154f99-506e-4c02-8691-77ac05354fd7",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20370630"
	},
	"item": [
		{
			"name": "TASK_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* http://162.55.220.72:5005/first",
							"1. Отправить запрос.",
							"2. Статус код 200 */",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string. ",
							"",
							"pm.test(\"Correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Correct\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json. ",
							"var jsonData = pm.response.json();",
							"",
							"let name = jsonData.name;",
							"let age = jsonData.age;",
							"let salary = jsonData.salary;",
							"let family = jsonData.family;",
							"let salary4 = jsonData.u_salary_1_5_year;",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Correct name\", function () {",
							"    pm.expect(jsonData.name).to.eql('Anna');",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками)",
							"pm.test(\"Correct age\", function () {",
							"    pm.expect(jsonData.age).to.eql('26');",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"});",
							"",
							"//7. Спарсить request.",
							"var jsonRec = request.data;",
							"",
							"let req_name = jsonRec.name;",
							"let req_age = jsonRec.age;",
							"let req_salary = jsonRec.salary;",
							"let req_family = jsonRec.family;",
							"let rec_salary = jsonRec.u_salary_1_5_year;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Correct name\", function () {",
							"    pm.expect(jsonRec.name).to.eql('Anna');",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Correct age\", function () {",
							"    pm.expect(jsonRec.age).to.eql('26');",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(jsonRec.salary).to.eql('1000');",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"console.log('Family: ', family);",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Correct count\", function () {",
							"    pm.expect(req_salary).to.eql('1000');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"    var jsonData = pm.response.json();",
							"   ",
							"   let name = jsonData.name;",
							"   let age = jsonData.age;",
							"   let family = jsonData.family;",
							"   let salary = jsonData.salary;",
							"   let pets = jsonData.family.pets;",
							"   let dog = jsonData.family.pets.dog;",
							"   let salary_1_5 = jsonData.family.u_salary_1_5_year;",
							"",
							"   //4. Спарсить request.",
							"   var req = pm.request.url.query.toObject();",
							"",
							"   let request_name = req.name;",
							"   let request_age = req.age;",
							"   let request_salary = req.salary;",
							"",
							"   // 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Correct name\", function () {",
							"    pm.expect(name).to.eql(request_name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Correct age\", function () {",
							"    pm.expect(age).to.eql(request_age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(salary).to.eql(+request_salary);",
							"});",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"console.log(family);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Name include\", function () {",
							"    pm.expect(JSON.stringify(dog)).to.include('name');",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Name include\", function () {",
							"    pm.expect(JSON.stringify(dog)).to.include('age');",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Luky is correct\", function () {",
							"    pm.expect(JSON.stringify(dog.name)).to.include('Luky');",
							"});",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Age is correct\", function () {",
							"    pm.expect(JSON.stringify(dog.age)).to.include(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"    var jsonData = pm.response.json();",
							"    ",
							"    let age = jsonData.age;",
							"    let name = jsonData.name;",
							"    let salary = jsonData.salary;",
							"",
							"// 4. Спарсить request.",
							"var req = pm.request.url.query.toObject();",
							"",
							"let req_age = req.age;",
							"let req_name = req.name;",
							"let req_salary = req.salary;",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Correct name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req_name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Correct age\", function () {",
							"    pm.expect(jsonData.age).to.eql(+req_age);",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(req_salary);",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"console.log(salary);",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(salary[0]);",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(salary[1]);",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(salary[2]);",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(salary[0]).to.eql(+req_salary);",
							"});",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Correct salary x2\", function () {",
							"    pm.expect(salary[1]).to.eql(String(req_salary * 2));",
							"});",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Correct salary x3\", function () {",
							"    pm.expect(salary[2]).to.eql(String(req_salary * 3));",
							"});",
							"",
							"//15. Создать в окружении переменную name",
							"pm.environment.set(\"name\", req.name);",
							"",
							"//16. Создать в окружении переменную age",
							"pm.environment.set(\"age\", req.age);",
							"",
							"//17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\", req.salary);  ",
							"",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (let key of salary){",
							"    console.log(key);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//6. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"let person = jsonData.person;",
							"let u_age = jsonData.person.u_age;",
							"let u_salary_5_years = jsonData.person.u_salary_5_years;",
							"let qa_salary_after_1_5_year = jsonData['qa_salary_after_1.5_year'];",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months;",
							"let qa_salary_after_3_5_years = jsonData['qa_salary_after_3.5_years'];",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months;",
							"let start_qa_salary = jsonData.start_qa_salary;",
							"let u_name = jsonData.person.u_name;",
							"",
							"// 7. Спарсить request.",
							"var jsonReq = request.data;",
							"",
							"let name = jsonReq.name;",
							"let age = jsonReq.age;",
							"let salary = jsonReq.salary;",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Param include\", function () {",
							"    pm.expect(JSON.stringify(jsonData)).to.include('start_qa_salary');",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Param include\", function () {",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_6_months');",
							"});",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Param include\", function () {",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_12_months');",
							"});",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Param include\", function () {",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_1.5_year');",
							"});",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Param include\", function () {",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_3.5_years');",
							"});",
							"",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"Param include\", function () {",
							"    pm.expect(JSON.stringify(jsonData)).to.include('person');",
							"});",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(start_qa_salary).to.eql(+salary);",
							"});",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(qa_salary_after_6_months).to.eql(+salary * 2);",
							"});",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(qa_salary_after_12_months).to.eql(+salary * 2.7);",
							"});",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(qa_salary_after_1_5_year).to.eql(+salary * 3.3);",
							"});",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(qa_salary_after_3_5_years).to.eql(+salary * 3.8);",
							"});",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(String(u_name[1])).to.eql(salary);",
							"});",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(u_age).to.eql(+age);",
							"});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(u_salary_5_years).to.eql(salary * 4.2);",
							"});",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (let key in person){",
							"    console.log(key + ' : ' + person[key])",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}
